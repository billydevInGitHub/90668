We know that Object is the supertype of all Java classes. However, a collection of Object is not the supertype of any collection.

For example, a List<Object> is not the supertype of List<String>, and assigning a variable of type List<Object> to a variable of
type List<String> will cause a compiler error.
     # maybe vice versa

If we need to use this method with type Building and all its subtypes, the bounded wildcard can do the magic:

public static void paintAllBuildings(List<? extends Building> buildings) {
    ...
}
Now this method will work with type Building and all its subtypes. This is called an upper-bounded wildcard, where type Building is
  the upper bound.
     # so the type inheritance happened within the generic type part using wildcard
     #  from: https://www.baeldung.com/java-generics